{"version":3,"file":"static/js/726.2ab86656.chunk.js","mappings":"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","sources":["routes/Detail.js"],"sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { Context1 } from \"./../App.js\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addCount, addItem } from \"./../store.js\";\r\n\r\n// mount,update시 코드 실행해주는 useEffect\r\n// useEffect를 쓰기좋을때.  실행시점이 조금 다름. 랜더링이 다 되고나서실행이 됨.\r\n\r\n// 예를들면 for반복문을 만번정도 해야한다고 하면 useEffect안에서 하면 좀더 효율적으로 동작가능.\r\n// html을 먼저 보여주고 어려운 작업을\r\n\r\nfunction Detail(props) {\r\n  let { 재고 } = useContext(Context1);\r\n  //  보관함 해체하면 이제 오브젝트 형태로 남게됨.\r\n\r\n  let { id } = useParams();\r\n  let 찾은상품 = props.shoes.find((x) => x.id == id);\r\n  let [count, setCount] = useState(\"\");\r\n  const [box, setBox] = useState(true);\r\n  let [탭, 탭변경] = useState(0);\r\n  let [fade2, setFade2] = useState(\"\");\r\n  let dispatch = useDispatch();\r\n\r\n  // mount,update시 setTimeout이 실행되는데\r\n  // 여기서 디펜던시가 입력되면 count라는 state가 변할때만 실행이 된다.\r\n  // 즉 처음 mount되면 실행되고 그이후로는 count가 변경될때만 실행되는 코드.\r\n\r\n  // timer주로 사용할때 ?\r\n  // useEffect에 return값을 입력하면 useEffect 동작전에 return이 실행이된다.\r\n  // 주로 사용하는 예시로는 어려운작업을 시작하기전에 주변을 리셋하고자 할때.\r\n  // 재랜더링이 잦은 리액트. 타이머가 예상치않게 백개천개생성이 될수도 있음.\r\n  // timer를 집어넣을때 보통, 기존타이머는 제거해달라는 요청을 return에 입력하면\r\n  // 내가 필요로하지않은 타이머는 제거하고 내가 필요로한것만 장착할수가 있기에 비효율 방지가된다.\r\n\r\n  //\r\n  useEffect(() => {\r\n    let timer = setTimeout(() => setBox(false), 2000);\r\n  }, [count]);\r\n\r\n  // 1. Detail.js 를누르면\r\n  // 2. useEffect 코드가 실행되도록한ㄷ.\r\n  // 3. 먼저 찾은상품을 선언해주고\r\n  // 4. useEffect코드에서 찾은상품.id가 변경될때마다 localStorage에 새롭게 요소가 추가된다.\r\n  useEffect(() => {\r\n    // 이전에 했던 찾은 상품 id 출력\r\n\r\n    // 1. 먼저 app에 저장된 watched배열 을 가져온다 .\r\n    // 2. watched를 문자열로 변환 후\r\n    // 3.  배열에 push\r\n    // 4. 새롭게 Watched에 업로드함과 다시 JSON화시켜줄것.\r\n    let pick = JSON.parse(localStorage.getItem(\"watched\"));\r\n    pick.push(찾은상품.id);\r\n\r\n    pick = new Set(pick);\r\n    pick = Array.from(pick);\r\n\r\n    localStorage.setItem(\"watched\", JSON.stringify(pick));\r\n  }, [찾은상품.id]);\r\n\r\n  useEffect(() => {\r\n    setFade2(\"end\");\r\n    return () => {\r\n      setFade2(\"\");\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className={\"container start \" + fade2}>\r\n      {box == true ? (\r\n        <div className=\"alert alert-warning\">2초후 사라진다.</div>\r\n      ) : null}\r\n      {count}\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <img\r\n            src={process.env.PUBLIC_URL + \"/detail1.png\"}\r\n            alt=\"detailImg\"\r\n            height=\"800px\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n          <p>{찾은상품.content}</p>\r\n          <p>{찾은상품.price}</p>\r\n          <button\r\n            className=\"danger btn-danger\"\r\n            onClick={() => {\r\n              dispatch(\r\n                addItem({ id: 2, name: \"BODY\", count: 1, price: \"32000\" })\r\n              );\r\n            }}\r\n          >\r\n            주문하기\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {/* 싸이트에서 기본적으로 클릭되어있는 페이지 적용. */}\r\n      <Nav variant=\"tabs\" defaultActiveKey=\"link0\">\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            onClick={() => {\r\n              탭변경(0);\r\n            }}\r\n            eventKey=\"link0\"\r\n          >\r\n            버튼0\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            onClick={() => {\r\n              탭변경(1);\r\n            }}\r\n            eventKey=\"link1\"\r\n          >\r\n            버튼1\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            onClick={() => {\r\n              탭변경(2);\r\n            }}\r\n            eventKey=\"link2\"\r\n          >\r\n            버튼2\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n      <TabContent 탭={탭} shoes={props.shoes} />\r\n      {재고}\r\n    </div>\r\n  );\r\n}\r\n\r\n// function TabContent(props){\r\nfunction TabContent({ 탭, shoes }) {\r\n  // state가 변경될때마다 특정 코드를 실행시키고 싶을때 ?\r\n  let [fade, setFade] = useState(\"\");\r\n  let { 재고 } = useContext(Context1);\r\n  // Detail뿐만 아니라 그 자식들까지도 이용이 가능\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setFade(\"end\");\r\n    }, 100);\r\n\r\n    //   클린업펑션, useEffect 시작전에 적용할 코드\r\n    return () => {\r\n      setFade(\"\");\r\n    };\r\n  }, [탭]);\r\n\r\n  // if(props.탭==0){\r\n  //     return <div>내용0</div>\r\n  // }\r\n  // if(props.탭==1){\r\n  //     return <div>내용1</div>\r\n  // }\r\n  // if(props.탭==2){\r\n  //     return <div>내용2</div>\r\n  // }\r\n  return (\r\n    <div className={\"start \" + fade}>\r\n      {[<div>내용0</div>, <div>내용1</div>, <div>내용2</div>][탭]}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n"],"names":["TabContent","_ref","탭","shoes","fade","setFade","useState","재고","useContext","Context1","useEffect","setTimeout","_jsx","className","children","props","id","useParams","찾은상품","find","x","count","setCount","box","setBox","탭변경","fade2","setFade2","dispatch","useDispatch","pick","JSON","parse","localStorage","getItem","push","Set","Array","from","setItem","stringify","_jsxs","src","process","alt","height","title","content","price","onClick","addItem","name","Nav","variant","defaultActiveKey","Item","Link","eventKey"],"sourceRoot":""}